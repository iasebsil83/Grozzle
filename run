#!/usr/bin/python3

'''

/--------------------------------------------------------------------------\
|                               GROZZLE                                    |
\--------------------------------------------------------------------------/
|      Grozzle is a puzzle solver using the Grover Algorithm. This has been
| done using some qbits from a quantum computer (or a simulator) and
| following a specific circuit.
|
| Versions :
|     18/10/2021 > [0.1.0]
|     - Started Grozzle
|
/--------------------------------------------------------------------------\

   LICENCE :

    Grozzle
    Copyright (C) 2021 BONFILS Laura, MELONI Axel, SILVANO Sebastien et SMANIOTTO Gabriel
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with this program.

    If not, see <https://www.gnu.org/licenses/>.
'''



# ---------------- IMPORTATIONS ----------------

#system
import os, sys

#sources
sys.path.append( os.getcwd() )
from src.qomputer import *
from src.grover   import *
from src.binutils import *
from src.pieces   import *
from src.rgba     import *
from src.window   import *
from src.startup  import *






# ---------------- DECLARATIONS ----------------

#qonstants
ITERATION_NBR = 1000

#puzzle
PIECES_NBR = 64

#create new window
win = Window("Grozzle 0.1.0", 1080,640,'#000000')






# ---------------- USEFUL ----------------

#oracle
def regular_oracle(value, patern):
	v = to16bArray(value)
	p = to16bArray(patern)

	#print("v : "+str(v)+"\np : "+str(p))
	#print("1 - v0 or p0 : "+str(v[0] | p[0]))
	#print("2 - v1 & p1 : "+str(v[1] & p[1]))
	#print("3 - v2 & p2 : "+str(v[2] & p[2]))
	#print("4 - v3 & p3 : "+str(v[3] & p[3]))
	#print("8 - 1 or 5 or 6 or 7 : "+str( (v[ 0] | p[ 0]) or (v[ 1] & p[ 1]) or (v[ 2] & p[ 2]) or (v[ 3] & p[ 3])))
	print()

	return (
		    (v[ 0] | p[ 0]) or
		(v[ 1] & p[ 1]) or
		(v[ 2] & p[ 2]) or
		(v[ 3] & p[ 3])
	) & (
		    (v[ 4] | p[ 4]) or
		(v[ 5] & p[ 5]) or
		(v[ 6] & p[ 6]) or
		(v[ 7] & p[ 7])
	) & (
		    (v[ 8] | p[ 8]) or
		(v[ 9] & p[ 9]) or
		(v[10] & p[10]) or
		(v[11] & p[11])
	) & (
		    (v[12] | p[12]) or
		(v[13] & p[13]) or
		(v[14] & p[14]) or
		(v[15] & p[15])
	)

#value selection
'''def quantum_select(sides, patern, iteration_nbr):

	#create qomputer
	qo = Qomputer(
		VALUES_NBR+1, #qbits
		VALUES_NBR    #measures
	)

	#set circuit
	qo.circuit = getGroverCircuit(values, patern)
	qo.showCircuit()

	#execute
	print( qo.run(iteration_nbr) )
'''
def regular_select(pieces, patern, iteration_nbr):
	result = []
	cnt    = 1

	#for each value
	for p in pieces:
		if regular_oracle( p.desc, patern.desc ):
			result.append(1)
			cnt += 1
		else:
			result.append(0)

	#normalize shots
	occurrences = int( iteration_nbr/cnt )
	for r in range(len(result)):
		result[r] *= occurrences

	return result






# ---------------- EXECUTION ----------------

#startup
startup(win)
win.stop()



#generate pieces & patern
pieces = []
for p in range(PIECES_NBR):
	pieces.append( Piece() )

patern = Piece(
	SIDE_INNER,
	SIDE_OUTER,
	SIDE_UNDEFINED,
	SIDE_UNDEFINED
)



#select descriptions that matches the patern
selection = regular_select(
	pieces,
	patern,
	ITERATION_NBR
)



#display
print("PIECES : [")
for p in range(PIECES_NBR):
	print(str(p)+" : ")
	pieces[p].print()
	print(" vs ")
	patern.print()
print("]\n")

print("PATERN :")
patern.print()

print("RESULT : {")
for s in range(len(selection)):
	if (selection[s] > 0):
		print("Piece "+str(printOnNdec(s,3))+" : "+str(printOnNbits(s,6))+" -> "+str(selection[s])+" : "+ printOn16b(pieces[s].desc) + " vs " + printOn16b(patern.desc))
print("}")
