#!/usr/bin/python3

'''

/--------------------------------------------------------------------------\
|                               GROZZLE                                    |
\--------------------------------------------------------------------------/
|      Grozzle is a puzzle solver using the Grover Algorithm. This has been
| done using some qbits from a quantum computer (or a simulator) and
| following a specific circuit.
|
| Versions :
|     18/10/2021 > [0.1.0]
|     - Started Grozzle
|
/--------------------------------------------------------------------------\

   LICENCE :

    Grozzle
    Copyright (C) 2021 BONFILS Laura, MELONI Axel, SILVANO Sebastien et SMANIOTTO Gabriel
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with this program.

    If not, see <https://www.gnu.org/licenses/>.
'''



# ---------------- IMPORTATIONS ----------------

#system
import os, sys
import glob
import random
sys.path.append( os.getcwd() )

#tkinter
from tkinter      import PhotoImage

#sources : utils
from src.binutils import *

#sources : quantum utils
from src.qomputer import *
from src.grover   import *

#sources : graphics
from src.window   import *
from src.startup  import *

#sources : puzzle
from src.puzzle   import *
from src.pieces   import *






# ---------------- DECLARATIONS ----------------

#qonstants
ITERATION_NBR = 1000

#puzzle
all_sprites       = glob.glob( os.getcwd() + '/sprites/_*')
PUZZLE_IMAGE_PATH = all_sprites[
	random.randint(0, len(all_sprites)-1 )
]
PUZZLE_ROWS       = 8 #64
PUZZLE_COLUMNS    = 16 #64

#window
GAME_WIDTH  = 1280
GAME_HEIGHT = 720
VERSION     = "0.1.0"
FRAME_RATE  = 1.0/40






# ---------------- USEFUL ----------------

#oracle
def regular_oracle(value, patern):
	v = to16bArray(value)
	p = to16bArray(patern)

	return (
		(v[ 0] | p[ 0]) or
		(v[ 1] & p[ 1]) or
		(v[ 2] & p[ 2]) or
		(v[ 3] & p[ 3])
	) & (
		(v[ 4] | p[ 4]) or
		(v[ 5] & p[ 5]) or
		(v[ 6] & p[ 6]) or
		(v[ 7] & p[ 7])
	) & (
		(v[ 8] | p[ 8]) or
		(v[ 9] & p[ 9]) or
		(v[10] & p[10]) or
		(v[11] & p[11])
	) & (
		(v[12] | p[12]) or
		(v[13] & p[13]) or
		(v[14] & p[14]) or
		(v[15] & p[15])
	)

#value selection
'''def quantum_select(sides, patern, iteration_nbr):

	#create qomputer
	qo = Qomputer(
		VALUES_NBR+1, #qbits
		VALUES_NBR    #measures
	)

	#set circuit
	qo.circuit = getGroverCircuit(values, patern)
	qo.showCircuit()

	#execute
	print( qo.run(iteration_nbr) )
'''
def regular_select(pieces, patern, iteration_nbr):
	result = []
	cnt    = 1

	#for each value
	for p in pieces:
		if regular_oracle( p.desc, patern.desc ):
			result.append(1)
			cnt += 1
		else:
			result.append(0)

	#normalize shots
	occurrences = int( iteration_nbr/cnt )
	for r in range(len(result)):
		result[r] *= occurrences

	return result






# ---------------- EXECUTION ----------------

#startup
win = Window(f"Grozzle [{VERSION}]", STARTUP_WIDTH, STARTUP_HEIGHT, '#000000')
startup(win)
win.resize(GAME_WIDTH, GAME_HEIGHT)



#generate puzzle
pz = Puzzle(
	PUZZLE_IMAGE_PATH,
	PUZZLE_ROWS,
	PUZZLE_COLUMNS
)



#patern
print("PATERN :")
patern = Piece(
	SIDE_INNER,
	SIDE_OUTER,
	SIDE_UNDEFINED,
	SIDE_UNDEFINED,
	PhotoImage(width=pz.pieceWidth, height=pz.pieceHeight)
)
patern.print()



#select descriptions that matches the patern
all_pieces = []
for col in pz.pieces:
	all_pieces += col
selection = regular_select(
	all_pieces,
	patern,
	ITERATION_NBR
)
print("RESULT :")
for s in range(len(selection)):
	print(
		"Piece "    + str(printOnNdec(s,3))  +
		" (bindex " + str(printOnNbits(s,6)) +
		") -> "     + str(selection[s])      +
		" times : " + printOn16b(all_pieces[s].desc) + " vs " + printOn16b(patern.desc)
	)



#main loop
while True:

	#background
	win.rect(
		0,         0,
		win.width, win.height,
		"#550055"
	)

	#show puzzle
	pz.show(win, win.width_2, win.height_2)

	#show patern piece
	patern.show(win, win.width_2 - patern.width, 15*win.height/16)

	#refresh screen
	win.show()
	sleep(FRAME_RATE)
